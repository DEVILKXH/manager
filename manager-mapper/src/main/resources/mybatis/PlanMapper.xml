<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.manager.mapper.PlanMapper">
	<resultMap id="BaseResultMap" type="com.manager.entity.Plan">
		<id column="UUID" property="uuid" jdbcType="VARCHAR" />
		<result column="TITLE" property="title" jdbcType="VARCHAR" />
		<result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
		<result column="USER_ID" property="userId" jdbcType="VARCHAR" />
		<result column="USER_NAME" property="userName" jdbcType="VARCHAR" />
		<result column="TYPE" property="type" jdbcType="VARCHAR" />
		<result column="READ_FLAG" property="readFlag" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap id="ResultMapWithBLOBs" type="com.manager.entity.Plan"
		extends="BaseResultMap">
		<result column="CONTENT" property="content" jdbcType="LONGVARCHAR" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		UUID, TITLE, CREATE_TIME, USER_ID, TYPE,READ_FLAG
	</sql>
	<sql id="Blob_Column_List">
		CONTENT
	</sql>
	<select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs"
		parameterType="com.manager.entity.PlanExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from plan
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.manager.entity.PlanExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from plan
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="getPlanPage" resultMap="BaseResultMap">

		select
		a.UUID, a.TITLE, a.CREATE_TIME, a.USER_ID, a.TYPE,
		a.CONTENT,b.USER_NAME,a.READ_FLAG
		from plan a
		left join user b on a.user_id = b .uuid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="plan.uuid != null">
				and a.uuid = #{plan.uuid}
			</if>
			<if test="plan.title != null">
				and a.title = #{plan.title,jdbcType=VARCHAR}
			</if>
			<if test="plan.createTime != null">
				and a.create_time = #{plan.createTime,jdbcType=TIMESTAMP}
			</if>
			<if test="users != null">
				and a.user_id in
				<foreach collection="users" item="user" open="(" close=")"
					separator=",">
					#{user.uuid}
				</foreach>
			</if>
			<if test="plan.type != null">
				and a.type= #{plan.type,jdbcType=VARCHAR}
			</if>
			<if test="plan.content != null">
				and a.content = #{plan.content,jdbcType=LONGVARCHAR}
			</if>
			<if test="plan.readFlag != null">
				and a.read_flag = #{plan.readFlag}
			</if>
		</trim>
		order by create_time
		limit #{page.start},#{page.end}
	</select>

	<select id="getPlanList" resultMap="BaseResultMap">
		select
		a.UUID, a.TITLE, a.CREATE_TIME, a.USER_ID, a.TYPE,
		a.CONTENT,b.USER_NAME,a.READ_FLAG
		from plan a
		left join user b on a.user_id = b .uuid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="plan.uuid != null">
				and a.uuid = #{plan.uuid}
			</if>
			<if test="plan.title != null">
				and a.title = #{plan.title,jdbcType=VARCHAR}
			</if>
			<if test="plan.createTime != null">
				and a.create_time = #{plan.createTime,jdbcType=TIMESTAMP}
			</if>
			<if test="users != null">
				and a.user_id in
				<foreach collection="users" item="user" open="(" close=")"
					separator=",">
					#{user.uuid}
				</foreach>
			</if>
			<if test="plan.type != null">
				and a.type= #{plan.type,jdbcType=VARCHAR}
			</if>
			<if test="plan.content != null">
				and a.content = #{plan.content,jdbcType=LONGVARCHAR}
			</if>
			<if test="plan.readFlag != null">
				and a.read_flag = #{plan.readFlag}
			</if>
		</trim>
	</select>

	<select id="count" resultType="java.lang.Integer">
		select
		count(0)
		from plan a
		left join user b on a.user_id = b .uuid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="plan.uuid != null">
				and a.uuid = #{plan.uuid}
			</if>
			<if test="plan.title != null">
				and a.title = #{plan.title,jdbcType=VARCHAR}
			</if>
			<if test="plan.createTime != null">
				and a.create_time = #{plan.createTime,jdbcType=TIMESTAMP}
			</if>
			<if test="users != null">
				and a.user_id in
				<foreach collection="users" item="user" open="(" close=")"
					separator=",">
					#{user.uuid}
				</foreach>
			</if>
			<if test="plan.type != null">
				and a.type= #{plan.type,jdbcType=VARCHAR}
			</if>
			<if test="plan.content != null">
				and a.content = #{plan.content,jdbcType=LONGVARCHAR}
			</if>
			<if test="plan.readFlag != null">
				and a.read_flag = #{plan.readFlag}
			</if>
		</trim>
	</select>

	<select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from plan
		where UUID = #{uuid,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from plan
		where UUID = #{uuid,jdbcType=VARCHAR}
	</delete>
	<delete id="deleteByExample" parameterType="com.manager.entity.PlanExample">
		delete from plan
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.manager.entity.Plan">
		insert into plan (UUID,TITLE, CREATE_TIME, USER_ID,
		TYPE, CONTENT,READ_FLAG)
		values (#{uuid},#{title,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
		#{userId,jdbcType=VARCHAR},
		#{type,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR},#{readFlag})
	</insert>
	<insert id="insertSelective" parameterType="com.manager.entity.Plan">
		insert into plan
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="uuid != null">
				uuid,
			</if>
			<if test="title != null">
				TITLE,
			</if>
			<if test="createTime != null">
				CREATE_TIME,
			</if>
			<if test="userId != null">
				USER_ID,
			</if>
			<if test="type != null">
				TYPE,
			</if>
			<if test="content != null">
				CONTENT,
			</if>
			<if test="readFlag != null">
				READ_FLAG,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="uuid != null">
				#{uuid},
			</if>
			<if test="title != null">
				#{title,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				#{type,jdbcType=VARCHAR},
			</if>
			<if test="content != null">
				#{content,jdbcType=LONGVARCHAR},
			</if>
			<if test="readFlag != null">
				#{readFlag}
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.manager.entity.PlanExample"
		resultType="java.lang.Integer">
		select count(*) from plan
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update plan
		<set>
			<if test="record.uuid != null">
				UUID = #{record.uuid,jdbcType=VARCHAR},
			</if>
			<if test="record.title != null">
				TITLE = #{record.title,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null">
				CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.userId != null">
				USER_ID = #{record.userId,jdbcType=VARCHAR},
			</if>
			<if test="record.type != null">
				TYPE = #{record.type,jdbcType=VARCHAR},
			</if>
			<if test="record.content != null">
				CONTENT = #{record.content,jdbcType=LONGVARCHAR},
			</if>
			<if test="record.readFlag != null">
				READ_FLAG = #{record.readFlag}
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExampleWithBLOBs" parameterType="map">
		update plan
		set UUID = #{record.uuid,jdbcType=VARCHAR},
		TITLE = #{record.title,jdbcType=VARCHAR},
		CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
		USER_ID = #{record.userId,jdbcType=VARCHAR},
		TYPE = #{record.type,jdbcType=VARCHAR},
		CONTENT = #{record.content,jdbcType=LONGVARCHAR},
		read_flag = #{record.readFlag}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update plan
		set UUID = #{record.uuid,jdbcType=VARCHAR},
		TITLE = #{record.title,jdbcType=VARCHAR},
		CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
		USER_ID = #{record.userId,jdbcType=VARCHAR},
		read_Flag = #{record.readFlag},
		TYPE = #{record.type,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.manager.entity.Plan">
		update plan
		<set>
			<if test="title != null">
				TITLE = #{title,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="userId != null">
				USER_ID = #{userId,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				TYPE = #{type,jdbcType=VARCHAR},
			</if>
			<if test="content != null">
				CONTENT = #{content,jdbcType=LONGVARCHAR},
			</if>
			<if test="readFlag != null">
				read_flag = #{readFlag},
			</if>
		</set>
		where UUID = #{uuid,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs" parameterType="com.manager.entity.Plan">
		update plan
		set TITLE = #{title,jdbcType=VARCHAR},
		CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
		USER_ID = #{userId,jdbcType=VARCHAR},
		TYPE = #{type,jdbcType=VARCHAR},
		read_flag = #{readFlag},
		CONTENT = #{content,jdbcType=LONGVARCHAR}
		where UUID = #{uuid,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.manager.entity.Plan">
		update plan
		set TITLE = #{title,jdbcType=VARCHAR},
		CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
		USER_ID = #{userId,jdbcType=VARCHAR},
		read_flag = #{readFlag},
		TYPE = #{type,jdbcType=VARCHAR}
		where UUID = #{uuid,jdbcType=VARCHAR}
	</update>
	
	<select id="getPage" resultMap="BaseResultMap">
	</select>
	<select id="getList" resultMap="BaseResultMap">
	</select>
</mapper>